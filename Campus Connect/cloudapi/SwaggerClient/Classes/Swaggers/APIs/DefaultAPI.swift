//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter imageBytes: (body) The image file that you wish to analyze encoded in base64  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func recognizeBytes(imageBytes imageBytes: String, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        recognizeBytesWithRequestBuilder(imageBytes: imageBytes, secretKey: secretKey, country: country, recognizeVehicle: recognizeVehicle, state: state, returnImage: returnImage, topn: topn, prewarp: prewarp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /recognize_bytes
     - Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - examples: [{contentType=application/json, example={
  "credits_monthly_used" : "",
  "processing_time" : {
    "total" : 1.3579000000000001069366817318950779736042022705078125,
    "plates" : 1.3579000000000001069366817318950779736042022705078125,
    "vehicles" : 1.3579000000000001069366817318950779736042022705078125
  },
  "regions_of_interest" : [ "" ],
  "credits_monthly_total" : "",
  "img_width" : "",
  "img_height" : "",
  "credit_cost" : "",
  "data_type" : "aeiou",
  "results" : [ {
    "candidates" : [ {
      "confidence" : 1.3579000000000001069366817318950779736042022705078125,
      "plate" : "aeiou",
      "matches_template" : ""
    } ],
    "processing_time_ms" : 1.3579000000000001069366817318950779736042022705078125,
    "region_confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "requested_topn" : "",
    "confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "coordinates" : [ {
      "x" : "",
      "y" : ""
    } ],
    "plate" : "aeiou",
    "matches_template" : "",
    "region" : "aeiou",
    "vehicle_region" : {
      "x" : "",
      "width" : "",
      "y" : "",
      "height" : ""
    },
    "vehicle" : {
      "color" : [ {
        "confidence" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou"
      } ],
      "body_type" : [ "" ],
      "make" : [ "" ],
      "make_model" : [ "" ]
    }
  } ],
  "epoch_time" : 1.3579000000000001069366817318950779736042022705078125,
  "version" : ""
}}]
     
     - parameter imageBytes: (body) The image file that you wish to analyze encoded in base64  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func recognizeBytesWithRequestBuilder(imageBytes imageBytes: String, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/recognize_bytes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = imageBytes.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter image: (form) The image file that you wish to analyze  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func recognizeFile(image image: NSURL, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        recognizeFileWithRequestBuilder(image: image, secretKey: secretKey, country: country, recognizeVehicle: recognizeVehicle, state: state, returnImage: returnImage, topn: topn, prewarp: prewarp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /recognize
     - Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - examples: [{contentType=application/json, example={
  "credits_monthly_used" : "",
  "processing_time" : {
    "total" : 1.3579000000000001069366817318950779736042022705078125,
    "plates" : 1.3579000000000001069366817318950779736042022705078125,
    "vehicles" : 1.3579000000000001069366817318950779736042022705078125
  },
  "regions_of_interest" : [ "" ],
  "credits_monthly_total" : "",
  "img_width" : "",
  "img_height" : "",
  "credit_cost" : "",
  "data_type" : "aeiou",
  "results" : [ {
    "candidates" : [ {
      "confidence" : 1.3579000000000001069366817318950779736042022705078125,
      "plate" : "aeiou",
      "matches_template" : ""
    } ],
    "processing_time_ms" : 1.3579000000000001069366817318950779736042022705078125,
    "region_confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "requested_topn" : "",
    "confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "coordinates" : [ {
      "x" : "",
      "y" : ""
    } ],
    "plate" : "aeiou",
    "matches_template" : "",
    "region" : "aeiou",
    "vehicle_region" : {
      "x" : "",
      "width" : "",
      "y" : "",
      "height" : ""
    },
    "vehicle" : {
      "color" : [ {
        "confidence" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou"
      } ],
      "body_type" : [ "" ],
      "make" : [ "" ],
      "make_model" : [ "" ]
    }
  } ],
  "epoch_time" : 1.3579000000000001069366817318950779736042022705078125,
  "version" : ""
}}]
     
     - parameter image: (form) The image file that you wish to analyze  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func recognizeFileWithRequestBuilder(image image: NSURL, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/recognize"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "secret_key": secretKey,
            "recognize_vehicle": recognizeVehicle?.encodeToJSON(),
            "country": country,
            "state": state,
            "return_image": returnImage?.encodeToJSON(),
            "topn": topn?.encodeToJSON(),
            "prewarp": prewarp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: falsefalse)
    }

    /**

     - parameter imageUrl: (query) A URL to an image that you wish to analyze  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func recognizeUrl(imageUrl imageUrl: String, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        recognizeUrlWithRequestBuilder(imageUrl: imageUrl, secretKey: secretKey, country: country, recognizeVehicle: recognizeVehicle, state: state, returnImage: returnImage, topn: topn, prewarp: prewarp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /recognize_url
     - Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - responseHeaders: [X-RateLimit-Limit(Int32), X-Ratelimit-Remaining(Int32), X-Ratelimit-Reset(Int32)]
     - examples: [{contentType=application/json, example={
  "credits_monthly_used" : "",
  "processing_time" : {
    "total" : 1.3579000000000001069366817318950779736042022705078125,
    "plates" : 1.3579000000000001069366817318950779736042022705078125,
    "vehicles" : 1.3579000000000001069366817318950779736042022705078125
  },
  "regions_of_interest" : [ "" ],
  "credits_monthly_total" : "",
  "img_width" : "",
  "img_height" : "",
  "credit_cost" : "",
  "data_type" : "aeiou",
  "results" : [ {
    "candidates" : [ {
      "confidence" : 1.3579000000000001069366817318950779736042022705078125,
      "plate" : "aeiou",
      "matches_template" : ""
    } ],
    "processing_time_ms" : 1.3579000000000001069366817318950779736042022705078125,
    "region_confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "requested_topn" : "",
    "confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "coordinates" : [ {
      "x" : "",
      "y" : ""
    } ],
    "plate" : "aeiou",
    "matches_template" : "",
    "region" : "aeiou",
    "vehicle_region" : {
      "x" : "",
      "width" : "",
      "y" : "",
      "height" : ""
    },
    "vehicle" : {
      "color" : [ {
        "confidence" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou"
      } ],
      "body_type" : [ "" ],
      "make" : [ "" ],
      "make_model" : [ "" ]
    }
  } ],
  "epoch_time" : 1.3579000000000001069366817318950779736042022705078125,
  "version" : ""
}}]
     
     - parameter imageUrl: (query) A URL to an image that you wish to analyze  
     - parameter secretKey: (query) The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  
     - parameter country: (query) Defines the training data used by OpenALPR.  \&quot;us\&quot; analyzes  North-American style plates.  \&quot;eu\&quot; analyzes European-style plates.  This field is required if using the \&quot;plate\&quot; task  You may use multiple datasets by using commas between the country  codes.  For example, &#39;au,auwide&#39; would analyze using both the  Australian plate styles.  A full list of supported country codes  can be found here https://github.com/openalpr/openalpr/tree/master/runtime_data/config  
     - parameter recognizeVehicle: (query) If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request  (optional, default to 0)
     - parameter state: (query) Corresponds to a US state or EU country code used by OpenALPR pattern  recognition.  For example, using \&quot;md\&quot; matches US plates against the  Maryland plate patterns.  Using \&quot;fr\&quot; matches European plates against  the French plate patterns.  (optional, default to )
     - parameter returnImage: (query) If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response  (optional, default to 0)
     - parameter topn: (query) The number of results you would like to be returned for plate  candidates and vehicle classifications  (optional, default to 10)
     - parameter prewarp: (query) Prewarp configuration is used to calibrate the analyses for the  angle of a particular camera.  More information is available here http://doc.openalpr.com/accuracy_improvements.html#calibration  (optional, default to )

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func recognizeUrlWithRequestBuilder(imageUrl imageUrl: String, secretKey: String, country: String, recognizeVehicle: Int32? = nil, state: String? = nil, returnImage: Int32? = nil, topn: Int32? = nil, prewarp: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/recognize_url"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "image_url": imageUrl,
            "secret_key": secretKey,
            "recognize_vehicle": recognizeVehicle?.encodeToJSON(),
            "country": country,
            "state": state,
            "return_image": returnImage?.encodeToJSON(),
            "topn": topn?.encodeToJSON(),
            "prewarp": prewarp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
