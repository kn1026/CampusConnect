// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Coordinate]
            Decoders.addDecoder(clazz: [Coordinate].self) { (source: AnyObject) -> [Coordinate] in
                return Decoders.decode(clazz: [Coordinate].self, source: source)
            }
            // Decoder for Coordinate
            Decoders.addDecoder(clazz: Coordinate.self) { (source: AnyObject) -> Coordinate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Coordinate()
                instance.x = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["x"])
                instance.y = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["y"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.processingTime = Decoders.decodeOptional(clazz: InlineResponse200ProcessingTime.self, source: sourceDictionary["processing_time"])
                instance.imgWidth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["img_width"])
                instance.imgHeight = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["img_height"])
                instance.creditCost = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["credit_cost"])
                instance.creditsMonthlyUsed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["credits_monthly_used"])
                instance.creditsMonthlyTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["credits_monthly_total"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                instance.regionsOfInterest = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["regions_of_interest"])
                instance.epochTime = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["epoch_time"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dataType = InlineResponse200.DataType(rawValue: (sourceDictionary["data_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [InlineResponse200ProcessingTime]
            Decoders.addDecoder(clazz: [InlineResponse200ProcessingTime].self) { (source: AnyObject) -> [InlineResponse200ProcessingTime] in
                return Decoders.decode(clazz: [InlineResponse200ProcessingTime].self, source: source)
            }
            // Decoder for InlineResponse200ProcessingTime
            Decoders.addDecoder(clazz: InlineResponse200ProcessingTime.self) { (source: AnyObject) -> InlineResponse200ProcessingTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200ProcessingTime()
                instance.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"])
                instance.plates = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["plates"])
                instance.vehicles = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vehicles"])
                return instance
            }


            // Decoder for [InlineResponse400]
            Decoders.addDecoder(clazz: [InlineResponse400].self) { (source: AnyObject) -> [InlineResponse400] in
                return Decoders.decode(clazz: [InlineResponse400].self, source: source)
            }
            // Decoder for InlineResponse400
            Decoders.addDecoder(clazz: InlineResponse400.self) { (source: AnyObject) -> InlineResponse400 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse400()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PlateCandidate]
            Decoders.addDecoder(clazz: [PlateCandidate].self) { (source: AnyObject) -> [PlateCandidate] in
                return Decoders.decode(clazz: [PlateCandidate].self, source: source)
            }
            // Decoder for PlateCandidate
            Decoders.addDecoder(clazz: PlateCandidate.self) { (source: AnyObject) -> PlateCandidate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlateCandidate()
                instance.plate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plate"])
                instance.confidence = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["confidence"])
                instance.matchesTemplate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["matches_template"])
                return instance
            }


            // Decoder for [PlateDetails]
            Decoders.addDecoder(clazz: [PlateDetails].self) { (source: AnyObject) -> [PlateDetails] in
                return Decoders.decode(clazz: [PlateDetails].self, source: source)
            }
            // Decoder for PlateDetails
            Decoders.addDecoder(clazz: PlateDetails.self) { (source: AnyObject) -> PlateDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlateDetails()
                instance.plate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plate"])
                instance.matchesTemplate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["matches_template"])
                instance.requestedTopn = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["requested_topn"])
                instance.processingTimeMs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["processing_time_ms"])
                instance.confidence = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["confidence"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.regionConfidence = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["region_confidence"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                instance.candidates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["candidates"])
                instance.vehicleRegion = Decoders.decodeOptional(clazz: RegionOfInterest.self, source: sourceDictionary["vehicle_region"])
                instance.vehicle = Decoders.decodeOptional(clazz: VehicleDetails.self, source: sourceDictionary["vehicle"])
                return instance
            }


            // Decoder for [RegionOfInterest]
            Decoders.addDecoder(clazz: [RegionOfInterest].self) { (source: AnyObject) -> [RegionOfInterest] in
                return Decoders.decode(clazz: [RegionOfInterest].self, source: source)
            }
            // Decoder for RegionOfInterest
            Decoders.addDecoder(clazz: RegionOfInterest.self) { (source: AnyObject) -> RegionOfInterest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RegionOfInterest()
                instance.x = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["x"])
                instance.y = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["y"])
                instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"])
                instance.height = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["height"])
                return instance
            }


            // Decoder for [VehicleCandidate]
            Decoders.addDecoder(clazz: [VehicleCandidate].self) { (source: AnyObject) -> [VehicleCandidate] in
                return Decoders.decode(clazz: [VehicleCandidate].self, source: source)
            }
            // Decoder for VehicleCandidate
            Decoders.addDecoder(clazz: VehicleCandidate.self) { (source: AnyObject) -> VehicleCandidate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleCandidate()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.confidence = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["confidence"])
                return instance
            }


            // Decoder for [VehicleDetails]
            Decoders.addDecoder(clazz: [VehicleDetails].self) { (source: AnyObject) -> [VehicleDetails] in
                return Decoders.decode(clazz: [VehicleDetails].self, source: source)
            }
            // Decoder for VehicleDetails
            Decoders.addDecoder(clazz: VehicleDetails.self) { (source: AnyObject) -> VehicleDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleDetails()
                instance.color = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["color"])
                instance.make = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["make"])
                instance.makeModel = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["make_model"])
                instance.bodyType = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["body_type"])
                return instance
            }
        }
    }
}
